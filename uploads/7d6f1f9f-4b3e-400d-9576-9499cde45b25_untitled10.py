# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13fXcrVUfLJbBqrZBfnGdU-6QIfhvC5Ml
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, callbacks, models

from google.colab import files
uploaded = files.upload()

df=pd.read_csv('student_success_expanded_balanced.csv')

print("Shape:", df.shape)
display(df.head())
print("\nMissing values per column:\n", df.isnull().sum())
print("\nBasic stats:\n", df.describe(include='all').transpose())

if 'Result' not in df.columns:
    raise ValueError("Expected target column named 'Result' in CSV.")
print("\nValue counts of target 'Result':\n", df['Result'].value_counts())

all_cols = df.columns.tolist()
print("\nColumns found:", all_cols)

# Create lists for numeric and categorical columns automatically (excluding target)
TARGET = 'Result'
features = [c for c in df.columns if c != TARGET]

# Heuristic: treat object / category dtypes as categorical, numeric dtypes as numeric
categorical_cols = df[features].select_dtypes(include=['object', 'category']).columns.tolist()
numeric_cols = df[features].select_dtypes(include=[np.number]).columns.tolist()

print("\nNumeric columns:", numeric_cols)
print("Categorical columns:", categorical_cols)

# Convert target to 0/1
# Accepts "Pass"/"Fail" or 1/0 already; normalize:
df[TARGET] = df[TARGET].map(lambda x: 1 if str(x).strip().lower() in ['pass', '1', 'true', 'yes'] else 0)
y = df[TARGET].values

X = df[features].copy()

# Preprocessing pipeline:
# - OneHotEncode categoricals (drop='first' optional, we will keep all to avoid accidental info loss)
# - StandardScale numeric columns
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_cols),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
    ],
    remainder='drop'
)

# Fit transformer to entire data (we will split afterwards)
X_processed = preprocessor.fit_transform(X)
print("\nProcessed feature shape:", X_processed.shape)

# --------- 3. Train-test split ----------
SEED = 42 # Defining SEED
X_train, X_test, y_train, y_test = train_test_split(
    X_processed, y, test_size=0.2, random_state=SEED, stratify=y
)
print(f"\nTrain shape: {X_train.shape}, Test shape: {X_test.shape}")
print("Train target distribution:", np.bincount(y_train))
print("Test target distribution:", np.bincount(y_test))

y[:5]

# --------- 4. Build ANN model (starter) ----------
input_dim = X_train.shape[1]

def build_model(hidden_layers=[32, 32], dropout_rate=0.0, learning_rate=1e-3):
    model = models.Sequential()
    model.add(layers.Input(shape=(input_dim,)))
    for i, units in enumerate(hidden_layers):
        model.add(layers.Dense(units, activation='relu', name=f"dense_{i+1}"))
        if dropout_rate and dropout_rate > 0:
            model.add(layers.Dropout(dropout_rate))
    model.add(layers.Dense(1, activation='sigmoid', name='output'))
    opt = keras.optimizers.Adam(learning_rate=learning_rate)
    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])
    return model

model = build_model([32,32], dropout_rate=0.2, learning_rate=1e-3)
model.summary()

# --------- 5. Train the model ----------
EPOCHS = 60
BATCH_SIZE = 32

es = callbacks.EarlyStopping(monitor='val_loss', patience=8, restore_best_weights=True)
mc = callbacks.ModelCheckpoint('best_model.h5', monitor='val_loss', save_best_only=True)

history = model.fit(
    X_train, y_train,
    validation_split=0.2,
    epochs=EPOCHS,
    batch_size=BATCH_SIZE,
    callbacks=[es, mc],
    verbose=1
)

# Plot training history
plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.xlabel('epoch')
plt.legend()
plt.subplot(1,2,2)
plt.plot(history.history['accuracy'], label='train acc')
plt.plot(history.history['val_accuracy'], label='val acc')
plt.title('Accuracy')
plt.xlabel('epoch')
plt.legend()
plt.tight_layout()
plt.show()

# --------- 6. Evaluate on test set ----------
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=0)
print(f"\nTest loss: {test_loss:.4f}, Test accuracy: {test_acc:.4f}")

# predictions
y_pred_prob = model.predict(X_test).ravel()
y_pred = (y_pred_prob >= 0.5).astype(int)

print("\nAccuracy (sklearn):", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:")
cm = confusion_matrix(y_test, y_pred)
print(cm)

print("\nClassification Report:")
print(classification_report(y_test, y_pred, digits=4))

# Visualize confusion matrix (simple)
plt.figure(figsize=(5,4))
plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title("Confusion matrix")
plt.colorbar()
ticks = [0,1]
plt.xticks(ticks, ['Fail(0)','Pass(1)'])
plt.yticks(ticks, ['Fail(0)','Pass(1)'])
thresh = cm.max() / 2.
for i in range(cm.shape[0]):
    for j in range(cm.shape[1]):
        plt.text(j, i, format(cm[i, j], 'd'),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")
plt.ylabel('True label')
plt.xlabel('Predicted label')
plt.show()

# --------- 7. Simple experimentation options ----------
# 1) Try different architecture
model_small = build_model([32, 16], dropout_rate=0.2, learning_rate=1e-3)
history_small = model_small.fit(X_train, y_train, validation_split=0.2, epochs=40, batch_size=32,
                                callbacks=[callbacks.EarlyStopping(monitor='val_loss', patience=6, restore_best_weights=True)],
                                verbose=0)
print("\nSmall model eval:", model_small.evaluate(X_test, y_test, verbose=0))

# 2) Try different LR
model_lr = build_model([64,32], dropout_rate=0.2, learning_rate=1e-4)
history_lr = model_lr.fit(X_train, y_train, validation_split=0.2, epochs=40, batch_size=32,
                          callbacks=[callbacks.EarlyStopping(monitor='val_loss', patience=6, restore_best_weights=True)],
                          verbose=0)
print("Lower-LR model eval:", model_lr.evaluate(X_test, y_test, verbose=0))

# 3) Print best validation accuracies during training for the first model
best_val_acc = max(history.history['val_accuracy'])
best_epoch = history.history['val_accuracy'].index(best_val_acc) + 1
print(f"\nStarter model best val_accuracy: {best_val_acc:.4f} at epoch {best_epoch}")